openapi: 3.0.0
info:
  title: Attribute API
  description: API for managing attributes with nested dropdown support
  version: 1.0.0

paths:
  /attributes:
    get:
      summary: Retrieve a list of attributes
      description: |
        Fetches a list of attributes with support for filtering by:
        - entityType (car/properties)
        - parent_id (for nested attributes)
        - parent_value (for specific nested values)
        - purpose (sale/rent/both)
        - show_in_search (boolean)
      tags:
        - attribute
      parameters:
        - name: entityType
          in: query
          description: Filter by entity type (car/properties)
          required: false
          schema:
            $ref: '#/components/schemas/EntityAttribute'
        - name: parent_id
          in: query
          description: Filter by parent attribute ID
          required: false
          schema:
            type: integer
        - name: parent_value
          in: query
          description: Filter by parent attribute value
          required: false
          schema:
            type: string
        - name: purpose
          in: query
          description: Filter by attribute purpose (sale/rent/both)
          required: false
          schema:
            $ref: '#/components/schemas/AttributePurpose'
        - name: showInSearch
          in: query
          description: Filter by visibility in search (true/false)
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Attributes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeListResponse'
        404:
          description: No attributes found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new attribute
      description: |
        Create attribute with support for:
        - Text input
        - Dropdown
        - Nested dropdown
        - Purpose (sale/rent/both)
        - Search visibility
      tags:
        - attribute
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - input_type
                - entity
              properties:
                title:
                  type: string
                input_type:
                  type: string
                  enum: [text, dropdown, nested_dropdown]
                entity:
                  $ref: '#/components/schemas/EntityAttribute'
                parent_id:
                  type: integer
                  nullable: true
                parent_value:
                  type: string
                  nullable: true
                options:
                  type: string
                  description: JSON string of options array
                  example: '[{"value":"kia","label":"KIA"},{"value":"honda","label":"Honda"}]'
                has_child:
                  type: boolean
                  default: false
                show_in_search:
                  type: boolean
                  default: true
                purpose:
                  $ref: '#/components/schemas/AttributePurpose'
                icon:
                  type: string
                  format: binary
                  nullable: true
      responses:
        201:
          description: Attribute created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeResponse'
        400:
          description: Missing required fields or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /attributes/{id}:
    get:
      summary: Get an attribute by ID
      description: Get attribute details including related values
      tags:
        - attribute
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Attribute retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeWithValuesResponse'
        404:
          description: Attribute not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update an existing attribute
      description: Update attribute including nested relationships
      tags:
        - attribute
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AttributeUpdateRequest'
      responses:
        200:
          description: Attribute updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeResponse'
        404:
          description: Attribute not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete an attribute
      description: Delete attribute and its related values
      tags:
        - attribute
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Attribute deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        404:
          description: Attribute not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    EntityAttribute:
      type: string
      enum: [car, properties]
      example: car

    AttributePurpose:
      type: string
      enum: [sale, rent, both]
      default: both
      example: both

    AttributeBase:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Car Type"
        input_type:
          type: string
          enum: [text, dropdown, nested_dropdown]
          example: "dropdown"
        entity:
          $ref: '#/components/schemas/EntityAttribute'
        icon:
          type: string
          nullable: true
          example: "car-icon.png"
        show_in_search:
          type: boolean
          default: true
          example: true
        purpose:
          $ref: '#/components/schemas/AttributePurpose'
        has_child:
          type: boolean
          default: false
          example: false
        created_at:
          type: string
          format: date-time

    AttributeOptions:
      type: object
      properties:
        options:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
              label:
                type: string
              children:
                type: array
                items:
                  type: object

    AttributeResponse:
      allOf:
        - $ref: '#/components/schemas/AttributeBase'
        - $ref: '#/components/schemas/AttributeOptions'

    AttributeWithValuesResponse:
      type: object
      properties:
        attribute:
          $ref: '#/components/schemas/AttributeResponse'
        values:
          type: array
          items:
            $ref: '#/components/schemas/AttributeValue'

    AttributeListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Attributes retrieved successfully"
        data:
          type: array
          items:
            $ref: '#/components/schemas/AttributeResponse'

    AttributeValue:
      type: object
      properties:
        id:
          type: integer
        value:
          type: string
        selected_options:
          type: object
          nullable: true
        created_at:
          type: string
          format: date-time

    AttributeUpdateRequest:
      type: object
      properties:
        title:
          type: string
          nullable: true
        input_type:
          type: string
          enum: [text, dropdown, nested_dropdown]
          nullable: true
        entity:
          $ref: '#/components/schemas/EntityAttribute'
          nullable: true
        parent_id:
          type: integer
          nullable: true
        parent_value:
          type: string
          nullable: true
        options:
          type: string
          description: JSON string of options array
          nullable: true
        has_child:
          type: boolean
          nullable: true
        show_in_search:
          type: boolean
          nullable: true
        purpose:
          $ref: '#/components/schemas/AttributePurpose'
          nullable: true
        icon:
          type: string
          format: binary
          nullable: true

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message"
        errors:
          type: array
          items:
            type: string
          nullable: true

    ValidationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            validation:
              type: object
              additionalProperties: true