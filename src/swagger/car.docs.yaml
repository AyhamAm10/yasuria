openapi: 3.0.0
info:
  title: Car Management API
  description: API for managing cars, including creating, updating, deleting, and retrieving car information.
  version: 1.0.0
paths:
  /cars:
    get:
      summary: Get a list of cars
      description: Retrieve a list of cars based on various filter parameters like brand, model, location, and price.
      tags:
        - car
      parameters:
        - name: brand
          in: query
          schema: { type: string }
        - name: model
          in: query
          schema: { type: string }
        - name: location
          in: query
          schema: { type: string }
        - name: minPrice
          in: query
          schema: { type: number, format: float }
        - name: maxPrice
          in: query
          schema: { type: number, format: float }
        - name: page
          in: query
          schema: { type: string, default: "1" }
        - name: limit
          in: query
          schema: { type: string, default: "10" }
      responses:
        '200':
          description: Successfully retrieved the list of cars
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CarResponse'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: Cars not found
        '500':
          description: Internal server error

    post:
      summary: Create a new car
      tags: [car]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarCreateRequest'
      responses:
        '201':
          description: Successfully created the car
        '400':
          description: Bad request

  /cars/{id}:
    get:
      summary: Get car by ID
      tags: [car]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Successfully retrieved the car
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CarResponse'
        '404':
          description: Car not found

    put:
      summary: Update car details
      tags: [car]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarCreateRequest'
      responses:
        '200':
          description: Successfully updated the car
        '403':
          description: User not authorized
        '404':
          description: Car not found

    delete:
      summary: Delete a car
      tags: [car]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Successfully deleted the car
        '403':
          description: User not authorized
        '404':
          description: Car not found

components:
  schemas:
    Car:
      type: object
      properties:
        id: { type: integer }
        title_ar: { type: string }
        title_en: { type: string }
        desc_ar: { type: string }
        desc_en: { type: string }
        images:
          type: array
          items: { type: string }
        model: { type: string }
        brand: { type: string }
        location: { type: string }
        lat: { type: number, format: float, nullable: true }
        long: { type: number, format: float, nullable: true }
        status: { type: string }
        isActive: { type: boolean }
        price: { type: number, format: float }
        listing_type:
          type: string
          enum: [sale, rent]
        seller_type:
          type: string
          enum: [owner, broker]
        created_at:
          type: string
          format: date-time

    CarResponse:
      allOf:
        - $ref: '#/components/schemas/Car'
        - type: object
          properties:
            broker_office:
              type: object
              nullable: true
              properties:
                id: { type: integer }
                name: { type: string }
            user:
              type: object
              properties:
                id: { type: integer }
                fullName: { type: string }

    CarCreateRequest:
      type: object
      properties:
        title_ar: { type: string }
        title_en: { type: string }
        desc_ar: { type: string }
        desc_en: { type: string }
        model: { type: string }
        brand: { type: string }
        location: { type: string }
        status: { type: string }
        price: { type: number }
        lat: { type: number, format: float }
        long: { type: number, format: float }
        listing_type:
          type: string
          enum: [sale, rent]
        seller_type:
          type: string
          enum: [owner, broker]
        broker_office_id: { type: integer, nullable: true }
        user_id: { type: integer }
        images:
          type: array
          items: { type: string }

    Pagination:
      type: object
      properties:
        total: { type: integer }
        page: { type: integer }
        limit: { type: integer }
        totalPages: { type: integer }
